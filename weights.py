import numpy as np

"""
Parameters used in the paper:
These were initialized with distributions.py with some minor adjustments
described in the supplementary material. 
"""
mu1=1.3
mu2=0.9282957
mu3=0.4991303
mu4=0.2655985
sigma=0.35
threshold=0.724

"""
Parameters generated by distributions.py (run the script to regenerate them):
Uncomment to run simulations with these parameters. The results will be 
essentially equivalent to those reported in the paper using the parameters above.
The point here is that the results are not particularly sensitive to modest 
variations in the parameter settings.  
"""
# mu1=1.25
# mu2=0.970515977492
# mu3=0.48004121207
# mu4=0.213147729935
# sigma=0.4
# threshold=0.737


def murphy(seed=None):
	# Set seed for generating weight distributions
	if seed != None:
		np.random.seed(seed=seed)

	# Initialize dot product and weight matrices
	products = np.zeros((8,4))
	weights = np.zeros((8,4))

	# Compute weights for 8 categories from parameters using least squares
	for i in range(8):
		F = np.array([[1,1,1,1],[1,0,1,1],[0,1,1,1],[0,0,0,1]])
		X = [np.random.normal(mu1, sigma, 1), np.random.normal(mu2, sigma, 1), 
			 np.random.normal(mu3, sigma, 1), np.random.normal(mu4, sigma, 1)]
		G = np.linalg.pinv(np.dot(np.transpose(F),F))
		T = np.dot(np.transpose(F),X)
		W = np.dot(G,T)

		products[i,:] = X
		weights[i,:] = np.transpose(W)

	return [weights, products]
